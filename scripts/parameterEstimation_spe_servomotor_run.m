function [pOpt,Info] = parameterEstimation_spe_servomotor_run(dataFilename)
%PARAMETERESTIMATION_SPE_SERVOMOTOR_RUN
%
% Solve up a parameter estimation problem for the spe_servomotor model.
% Can be made into a standalone executable using Simulink Compiler.
%
% The function returns estimated parameter values, pOpt
% and estimation termination information, Info.
%
% The input argument, dataFilename, defines the file name to read for
% experiment data. The code here assumes the measured experiment data
% is in a CSV file or spreadsheet whose column headers are Time, Input,
% and Output. Modify the code as appropriate for your data. To see
% an example, type:
% openExample('sldo/BatteryDegradationParameterEstimationDeploymentExample')
%
% Modify the function to change the data file or data variables,
% or to change the estimation options.
%
% Auto-generated by SPETOOL on 27-Aug-2024 11:40:23.
%

%% Ensure model is compiled
%#function spe_servomotor.slx

%% Load configured experiment and simulator objects, and parameters
[~,name,~] = fileparts(dataFilename);
ID = name(end-3:end);
MATFile = ['spe_servomotorObjectsToDeploy',ID];
load(MATFile,'EstimationData','Simulator','p')

%% Load new data and update experiments.
%% *** Change the file name and data format to match your data. ***
if nargin < 1
    dataFilename = 'spe_servomotor_Data.csv';
end
experimentData = readtable(dataFilename);
% Update experiment input data
inputSeries = timeseries(experimentData.Input, experimentData.Time);
EstimationData = updateIOData(EstimationData, 'spe_servomotor/Input Signal (V)', inputSeries);
% Update experiment output data
outputSeries = timeseries(experimentData.Output, experimentData.Time);
EstimationData = updateIOData(EstimationData, 'spe_servomotor/rad to deg', outputSeries);

%% Create Estimation Objective Function
%
% Create a function that is called at each optimization iteration
% to compute the estimation cost.
%
% Use an anonymous function with one argument that calls spe_servomotor_optFcn.
optimfcn = @(P) spe_servomotor_optFcn(P,Simulator,EstimationData);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.Method = 'lsqnonlin';
Options.MethodOptions.FunctionTolerance = 0.2;
Options.MethodOptions.MaxFunctionEvaluations = 400;
Options.MethodOptions.OptimalityTolerance = 0.2;
Options.MethodOptions.StepTolerance = 1e-06;
Options.OptimizedModel = Simulator;
Options.MethodOptions.Display = 'none';
%% Estimate the Parameters
%
% Call sdo.optimize with the estimation objective function handle,
% parameters to estimate, and options.
[pOpt,Info] = sdo.optimize(optimfcn,p,Options);

%% Save estimated parameters
p = pOpt;
save(MATFile,"p",'-append');
end

function Vals = spe_servomotor_optFcn(P,Simulator,EstimationData)
%SPE_SERVOMOTOR_OPTFCN
%
% Function called at each iteration of the estimation problem.
%
% The function is called with a set of parameter values, P, and returns
% the estimation cost, Vals, to the optimization solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%%
% Define a signal tracking requirement to compute how well the model
% output matches the experiment data.
r = sdo.requirements.SignalTracking(...
    'Method', 'Residuals');
%%
% Update the experiment(s) with the estimated parameter values.
EstimationData = setEstimatedValues(EstimationData,P);

%%
% Simulate the model and compare model outputs with measured experiment
% data.

F_r = [];
Simulator = createSimulator(EstimationData,Simulator);
Simulator = sim(Simulator);

SimLog = find(Simulator.LoggedData,'logsout');
Sig = find(SimLog,EstimationData.OutputData.Name);

Error = evalRequirement(r,Sig.Values,EstimationData.OutputData.Values);
F_r = [F_r; Error(:)];

%% Return Values.
%
% Return the evaluated estimation cost in a structure to the
% optimization solver.
Vals.F = F_r;
end
